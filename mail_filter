#!/usr/bin/env perl
# Copyright (C) 2013 Ryan Kavanagh <rak@debian.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. The name of the author may not be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
# THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;

use lib $ENV{RLWRAP_FILTERDIR};
use lib '/usr/share/rlwrap/filters';
use lib '/usr/local/share/rlwrap/filters';

use RlwrapFilter;
use Term::ANSIColor qw(:constants);

############
# SETTINGS #
############

# Colourise the the header list?
# See http://perldoc.perl.org/Term/ANSIColor.html for colours.
# Use RESET to disable a particular colouring
my $colour = 1;

my %colours = (
		new	=> (BOLD GREEN)
	,	unread	=> (CYAN)
	,	flagged	=> (BOLD YELLOW)
	,	sig	=> (MAGENTA)
	,	thread	=> (BLUE)
);

# Enable debug output
my $debug = 0;
if ($debug) {
    use Data::Dumper;
}

# What various commands complete
# Format: a => ['arg_1', ...., 'arg_n']
# We complete the i-th argument of command a to something of
# type arg_i.
my %completion_types = (
		fi	=> ['folders', 'folders'],
	,	file	=> ['folders', 'folders'],
	,	mv	=> ['folders', 'folders'],
	,	move	=> ['folders', 'folders'],
	,	s	=> ['folders', 'folders'],
	,	save	=> ['folders', 'folders'],
	,	c	=> ['folders', 'folders'],
	,	copy	=> ['folders', 'folders'],
	# We always try to complete an alias
	,	m	=> ['alias'],
	,	mail	=> ['alias'],
	,	alias	=> ['alias'],
	# We try to complete a setting name
	,	se	=> ['settings_s'],
	,	set	=> ['settings_s']
	,	unset	=> ['settings_u']
);

my %current_location = (
		unread	=> 0
	,	flagged	=> 0
	,	new	=> 0
	,	sig	=> 0
);

my $at_first_prompt = 1;
my $mail_prompt = '[\&\?]\s+';
my @mail_commands;
my %current_aliases;
my @current_folders;
my %current_settings;
# From man page, extracted with sed/awk.
# setting type => names
my %mail_settings_tn = (
  'binary' => [ 'allnet'
	,	'append'
	,	'ask'
	,	'askatend'
	,	'askattach'
	,	'askcc'
	,	'askbcc'
	,	'asksign'
	,	'autocollapse'
	,	'autoinc'
	,	'autoprint'
	,	'autothread'
	,	'bang'
	,	'bsdannounce'
	,	'bsdcompat'
	,	'bsdflags'
	,	'bsdheadline'
	,	'bsdmsgs'
	,	'bsdorder'
	,	'bsdset'
	,	'chained-junk-tokens'
	,	'datefield'
	,	'debug'
	,	'disconnected'
	,	'disconnected-user@host'
	,	'dot'
	,	'editheaders'
	,	'emptybox'
	,	'emptystart'
	,	'flipr'
	,	'forward-as-attachment'
	,	'fullnames'
	,	'header'
	,	'hold'
	,	'ignore'
	,	'ignoreeof'
	,	'imap-use-starttls'
	,	'imap-use-starttls-user@host'
	,	'keep'
	,	'keepsave'
	,	'markanswered'
	,	'metoo'
	,	'newmail'
	,	'noheader'
	,	'outfolder'
	,	'page'
	,	'piperaw'
	,	'pop3-use-apop'
	,	'pop3-use-apop-user@host'
	,	'pop3-use-starttls'
	,	'pop3-use-starttls-user@host'
	,	'print-all-chars'
	,	'print-alternatives'
	,	'quiet'
	,	'record-resent'
	,	'reply-in-same-charset'
	,	'Replyall'
	,	'save'
	,	'searchheaders'
	,	'sendwait'
	,	'showlast'
	,	'showname'
	,	'showto'
	,	'skipemptybody'
	,	'smime-force-encryption'
	,	'smime-sign'
	,	'smime-no-default-ca'
	,	'smtp-use-starttls'
	,	'ssl-no-default-ca'
	,	'ssl-v2-allow'
	,	'stealthmua'
	,	'verbose'
	,	'writebackedited']
, 'string' => [ 'attrlist'
	,	'autobcc'
	,	'autocc'
	,	'autosort'
	,	'cmd'
	,	'crt'
	,	'DEAD'
	,	'EDITOR'
	,	'encoding'
	,	'escape'
	,	'folder'
	,	'folder-hook'
	,	'folder-hook-fullname'
	,	'from'
	,	'fwdheading'
	,	'headline'
	,	'hostname'
	,	'imap-auth'
	,	'imap-auth-user@host'
	,	'imap-cache'
	,	'imap-keepalive'
	,	'imap-list-depth'
	,	'indentprefix'
	,	'junkdb'
	,	'LISTER'
	,	'MAIL'
	,	'MAILX_HEAD'
	,	'MAILX_TAIL'
	,	'maximum-unencoded-line-length'
	,	'MBOX'
	,	'NAIL_EXTRA_RC'
	,	'newfolders'
	,	'nss-config-dir'
	,	'ORGANIZATION'
	,	'PAGER'
	,	'password-user@host'
	,	'pipe-content/subcontent'
	,	'pop3-keepalive'
	,	'prompt'
	,	'quote'
	,	'record'
	,	'replyto'
	,	'screen'
	,	'sendcharsets'
	,	'sender'
	,	'sendmail'
	,	'SHELL'
	,	'Sign'
	,	'sign'
	,	'signature'
	,	'smime-ca-dir'
	,	'smime-ca-file'
	,	'smime-cipher-user@host'
	,	'smime-crl-file'
	,	'smime-crl-dir'
	,	'smime-encrypt-user@host'
	,	'smime-nickname-user@host'
	,	'smime-sign-cert'
	,	'smime-sign-cert-user@host'
	,	'smime-sign-nickname'
	,	'smime-sign-nickname-user@host'
	,	'smtp'
	,	'smtp-auth'
	,	'smtp-auth-user@host'
	,	'smtp-auth-password'
	,	'smtp-auth-password-user@host'
	,	'smtp-auth-user'
	,	'smtp-auth-user-user@host'
	,	'ssl-ca-dir'
	,	'ssl-ca-file'
	,	'ssl-cert'
	,	'ssl-cert-user@host'
	,	'ssl-cipher-list'
	,	'ssl-crl-file'
	,	'ssl-crl-dir'
	,	'ssl-key'
	,	'ssl-key-user@host'
	,	'ssl-method'
	,	'ssl-method-user@host'
	,	'ssl-rand-egd'
	,	'ssl-rand-file'
	,	'ssl-verify'
	,	'ssl-verify-user@host'
	,	'toplines'
	,	'ttycharset'
	,	'VISUAL']
);
# Settings, names => type
my %mail_settings_nt;
for my $type (keys %mail_settings_tn) {
    for my $name (@{$mail_settings_tn{$type}}) {
        $mail_settings_nt{$name} = $type;
    }
}

my $filter = new RlwrapFilter;

$filter->prompt_handler(\&prompt);
$filter->completion_handler(\&complete);
if ($colour) {
    $filter->output_handler(\&output);
}
$filter->cloak_and_dagger_verbose($debug);
$filter->run;

############################ subroutines ####################################

# This subroutine updates our map of known aliases
sub update_aliases {
    my $alias_lines = $filter->cloak_and_dagger('alias', $mail_prompt, 2.0);
    %current_aliases = map { split(/\s+/, $_, 2) }(split /\r?\n/, $alias_lines);
}

# This subroutine updates our list of known commands
sub update_commands {
    my $help_text = $filter->cloak_and_dagger('list', $mail_prompt, 2.0);
    $help_text =~ s/^Commands are://g;
    @mail_commands = grep !/\r?\n/, split /(\,\s?|\r?\n)/, $help_text;
}

# This subroutine updates our list of known folders
sub update_folders {
    my $folder_lines = $filter->cloak_and_dagger('folders', $mail_prompt, 2.0);
    @current_folders = map { split }(split /\r?\n/, $folder_lines);
}

# This subroutine updates our map of current settings
sub update_settings {
    my $settings_lines = $filter->cloak_and_dagger('set', $mail_prompt, 2.0);
    if ($settings_lines =~ m/bsd(compat|set)/) {
        %current_settings = map { split(/\s+/, $_, 2) }(split
            /\r?\n/, $settings_lines);
    } else {
        %current_settings = ();
        foreach my $setting (split /\r?\n/, $settings_lines) {
            if ($setting =~ /^([^\=]+)\=(.*$)/) {
                $current_settings{"$1"} = $2;
            } else {
                $current_settings{"$setting"} = '';
            }
        }
    }
}

# Deals with hyphens and spaces in completions
sub completion_helper {
    my ($prefix, @candidates) = @_;
    if ($prefix =~ m/.*[\+\@\-\.].*/) {
        # If we have a period or a hyphen in candidates, we must make it play
        # nice with rlwrap by only returning what follows the hyphen/period
        # The number of occurences of - or . in $prefix :
        my $count = 0;
        while ($prefix =~ /[\+\@\-\.]/g) { $count++ };
        @candidates = map { s/^(?:[^\+\@\-\.]+[\+\@\-\.]){$count}//; $_ } @candidates;
    }
    return @candidates;
}

# Returns completions for an alias starting with $prefix
sub aliases {
    my ($prefix) = @_;
    update_aliases();
    my @candidates = grep /^$prefix/, keys %current_aliases;
    return completion_helper($prefix, @candidates);
}

# Returns completions for a folder starting with $prefix
sub folders {
    my ($prefix) = @_;
    update_settings();
    if (defined $current_settings{'folder'}
             && $current_settings{'folder'} =~ m/^.+$/) {
        update_folders();
        my @candidates = grep /^[\+\@]?$prefix/, @current_folders;
        return completion_helper($prefix, @candidates)
    } else {
        #$filter->send_output_oob("\nError: folder not set\n");
        return ("Error: folder variable not set");
    }
}

# Returns completions for a settingstarting with $prefix
sub settings {
    my ($prefix, $set) = @_;
    my @candidates = ();
    if ($set) {
        @candidates = grep /^$prefix/, keys %mail_settings_nt;
        @candidates = map { $mail_settings_nt{$_} eq 'string' ?
                            $_ . '=' : $_ } @candidates;
    } else {
        @candidates = grep /^$prefix/, keys %current_settings;
    }
    return completion_helper(@candidates);
}

# Updates our list of known commands at first prompt, and displays the prompt
# otherwise.
sub prompt {
    my ($prompt) = @_;
    if ($at_first_prompt) {
        if ($prompt =~ m/^[\?\&]\s+$/) {
            # This case matches as soon as we get past any initial Password: prompts,
            # and see a line with our mail prompt.
            # We want to update our list of known commands so that we can complete
            # them
            $at_first_prompt = 0;
            update_settings();
            update_commands();
        }
    }
    return $prompt;
}

# Completes setting names, folder names, and aliases.
sub complete {
    my($line, $prefix, @completions) = @_;

    # Split the line into words
    my @words = ($line =~ /(\w+(?:[\+\@\-\.']+\w*)*)/g);
    my $wordc = scalar @words;
    # We're completing a new (empty) argument unless we have a $prefix
    $wordc++ unless $prefix;
    if ($wordc <= 1) {
        # We're trying to complete a command
        push @completions, grep /^$prefix/, @mail_commands;
        return @completions;
    }

    # We're trying to complete an argument
    my ($command) = ($line =~ /^\s*(\S+)/);
    my $narg = $wordc - 2; # Subtract 2: 1 since we start counting words at 1,
                           #         and 1 for word taken by the command
    if ($command eq 'm' ||
        $command eq 'mail') {
        # We can only complete aliases for the mail command, and there can be an
        # arbitrary number of these to complete. It is more convenient to set
        # narg to 1 in this case, than to have an arbitrarily long list of
        # ['alias',...,'alias',...] in $completion_types{'mail'}.
        $narg = 0;
    }
    if ($completion_types{$command}->[$narg]) {
        my @candidates = ();
        my $comptype = $completion_types{$command}->[$narg];
        # NOTE : we always assume we're expanding the last word.
        # This is because Rlwrap also splits the words at periods and
        # hyphens, and so if you're trying to complete 'abc.d' to 'abc.def',
        # rlwrap will try to complete the prefix 'd' instead of the prefix
        # 'abc.d'.
        if ($line =~ m/\s$/) {
            # Since we complete the last word on the line, make sure that we
            # don't try to complete it all over again (i.e., try to complete
            # an already completed word). Thus, if the line ends in
            # whitespace, assume we're trying to complete a new word without
            # any prefix.
            push @words, ('');
        }
        # TODO : Add some check to see if $prefix is a suffix of $words[-1],
        # and if not, determine which $word[i] it is a suffix of. Then complete
        # that word instead of $words[-1].
        if ($comptype eq 'folders') {
            push @completions, folders($words[-1]);
        } elsif ($comptype eq 'settings_s') {
            push @completions, settings($words[-1], 1);
        } elsif ($comptype eq 'settings_u') {
            push @completions, settings($words[-1], 0);
        } elsif ($comptype eq 'alias') {
            push @completions, aliases($words[-1]);
        }
    }
    return @completions;
}

sub output {
    my ($out) = @_;
    my @lines = split /\r?\n/ , $out;
    $filter->send_output_oob(Dumper(\%colours)) if $debug;
    my $curr_colour = RESET;
    foreach my $line (@lines) {
        if ($line =~ /^[> ][^\+UNF] {0,2}[0-9]+/ || $line =~ /^$mail_prompt$/ ||
            $line =~ m/^New mail has arrived.$/) {
            for my $key (keys %current_location) {
                    $current_location{$key} = 0;
            }
                $curr_colour = RESET;
        } elsif ($line =~ /^[> ]U {0,2}[0-9]+/ || $current_location{'unread'}) {
            $line = $colours{'unread'} . $line . RESET;
            $current_location{'unread'} = 1;
                $curr_colour = $colours{'unread'};
        } elsif ($line =~ /^[> ]F {0,2}[0-9]+/ || $current_location{'flagged'}) {
            $line = $colours{'flagged'} . $line . RESET;
            $current_location{'flagged'} = 1;
                $curr_colour = $colours{'flagged'};
        } elsif ($line =~ /^[> ]N {0,2}[0-9]+/ || $current_location{'new'}) {
            $line = $colours{'new'} . $line . RESET;
            $current_location{'new'} = 1;
                $curr_colour = $colours{'new'};
        } elsif ($line =~ /^\-\- $/ || $current_location{'sig'}) {
            $line = $colours{'sig'} . $line . RESET
            $current_location{'sig'} = 1;
                $curr_colour = $colours{'sig'};
        }
        my $coloured_th = RESET . $colours{'thread'} . '└' . $curr_colour;
        $line =~ s/└/$coloured_th/g;
    }
    return join("\n", @lines);
}
